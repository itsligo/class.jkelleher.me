Title: Inheritance

----
Description: Inheritance

----
Session: Semester 4 (2013-14)
----
Alert:
Results to follow [here](https://docs.google.com/spreadsheet/pub?key=0Avax7Tsevzx_dExCNFk0dDJDaERjbERQLU91WWdTb2c&single=true&gid=0&output=html) shortly.
----

Text:
(image: img1.png class: floated)

This assignment examines your understanding of identifying and creating a hierarchy of classes. Your task is to (as faithfully as possible) re-create this app as shown. You should contact me if you are unsure of any aspect of what is required. Here is a list of the key features:

1.  There is a class for **Animal, Herbivore, Carnivore, Elephant, Giraffe, BigCat and Bear.**
2.  You should deduce from running the application those properties particular to each type of **Animal**. While it should not be permitted to create an **Animal** object, it should be possible to create an object of each of the other classes. In the case of **Herbivore**, for example, there may be an instance of where details of the particular species of **Herbivore** are not known, but where a record must still be taken.
3.  Every animal has the following properties:
    * **SpeciesName** (e.g. Lion),
    * **Continent** (i.e. native to a particular continent),
    * **Sex** (i.e. male/female/unknown),
    * **GoesBy** (i.e. a nickname zoo-keepers might have for the animal)
    * **ReferenceImage** (i.e. a filename holding a stock image of that species, not a particular animal)
4.  Every **Herbivore** consumes a quantity of grass, measure in kg.
5.  Every **Carnivore** kills using a particular instrument such as 'teeth' or 'claws'.
6.  Every **Elephant** has the additional properties of **tuskLength** (measured in metres) and **typeOfElephant** (i.e. African or Indian).
7.  Every **BigCat** has the additional property of **OrganisationType** indicating the living habits of big cats - this is one of 'Solitary', 'Coalition' or 'Pride'.
8.  Every **Bear** has the additional property of **Endangered**, which is true if the animal is on the endangered species list.
9.  Every **Giraffe **has the additional property of **NeckLength**, measured in metres.
10.  A collection object should be employed to hold any number of animals. Name this collection, **zoo**.
11.  Mirror the display details of each **Animal** as shown above. Note that there is a short description in the listbox and more detail displayed when selected, underneath the image.
12.  The images used were found on [www.iconarchive.com](http://www.iconarchive.com/news.html). Note that every **Animal** has an image associated with it, even 'unknown' generic **Herbivore** or **Bear** animals. The most suitable image should be automatically employed. For instance, if a new **Bear** were created using **new Bear()**, then the image of a bear should be implicitly used.
13.  As can be seen from the application, a count is available for the number of **Animal, Herbivore** and **Carnivore** animals created.
14.  A set of **RadioButton** controls allows the user to filter the list to show all animals, only **Herbivore** and only **Carnivore** animals. Note the styling applied to the **RadioButton** controls. This will need to be mimicked carefully as with the rest of the UI.
15.  A wide variety of constructors should be provided so that instances of each kind of **Animal** can be created even when much of the detailed information is unavailable.  It might be helpful to note that the code used to create the set of animals in the app looks like this:
~~~~~
zoo.Add(new BigCat("Lion", Animal.Continent.Africa, "teeth", Animal.SexType.Male, BigCat.OrganisationType.Solitary, "Lenny"));
zoo.Add(new Elephant("Elephant", Animal.Continent.Asia, 210, Elephant._typeElephant.Indian, 2.3, Animal.SexType.Male, "Jumbo"));
zoo.Add(new Bear("Sun Bear", Animal.Continent.Asia, "claws", Animal.SexType.Female, true, "Sunnie"));
zoo.Add(new Giraffe("Namibian", Animal.Continent.Africa, 27, Animal.SexType.Male, 2.3, "Lofty"));
zoo.Add(new Bear("Brown Bear", Animal.Continent.North**America, "teeth", Animal.SexType.Female, false, "Larry"));
zoo.Add(new Elephant("Elephant", Animal.Continent.Africa, 219, Elephant._typeElephant.Indian, 3.0, Animal.SexType.Female, "Maisey"));
zoo.Add(new Elephant());
zoo.Add(new Giraffe());
zoo.Add(new Bear());
zoo.Add(new Herbivore());
zoo.Add(new Carnivore());
~~~~~
16.  As you will see from the source-code above, it may be the case that not all information is available at the time of creating a particular animal. These omissions should be handled as they are by the app. Note for example, the last line of code where a **Carnivore** animal is created. Note that there are no details provided. In the details section for that animal however, you can see that 'N/A' or 'Unknown' is displayed where a value is not available. A 'blank' space is not acceptable.
17.  Pay attention to the little details in the execution of the provided app. There are marks for spotting and recreating all details. For example, when the app loads, the first animal in the listbox is highlighted and focus is shifted immediately to that listbox. Similarly, the image with the details beneath resizes carefully to ensure the image is stretched while preserving the aspect ratio (i.e. stretched equally horizontally/vertically) and the text beneath shows a scrollbar when necessary, as does the listbox.

#### Marking Scheme

*   Identification/specification/implementation of appropriate class hierarchy **(50 marks)**
This involves choosing the right break-down of necessary classes, their data members/properties, methods, use of virtual/override/new keywords, constructors, static members, enum data types, employing inheritance correctly and efficiently, writing readable code.
*   User interface (UI) **(30 marks)**
This involves accurately rendering the UI as presented in the screen shot and accompanying executable, including such items as: effective use of placement containers, styling, layout manipulation, efficient xaml, selection and specification of appropriate controls.
*   Main program loop and user interaction **(20 marks)**
This constitutes a collection of relatively minor tasks concerning the main execution - handling user interaction, responding to events, creating the collection of animals and populating the display, binding data values to the UI, filtering list of animals, handling bitmap images and other resources, setting focus.

#### Assessment

This assignment will be set for completion out of class (consult class calendar for due date). It is a substantial assessment garnering a significant percentage of the module's overall mark. Your work input should reflect this. Expect to spend approximately 8-12 hours on its completion. Your submission will be marked but is subject to an in-class interview subsequent to the submission date. Failure to attend for this in-class interview may result in your mark being forfeited, irrespective of your submission. The purpose of the in-class interview will be to satisfy ourselves as to your understanding of the code which you have submitted as your own. As with all assessment, the presumption is that it is entirely of your own work unless clearly stated otherwise.

If plagiarism is found, then your CA mark will be adjusted downwards to reflect your understanding of the work submitted. A penalty reduction of 30% will also be immediately made to your mark, irrespective of your found understanding, to acknowledge the deception. Where typically when plagiarism is found, an 'original' source program is identified. The 'donating' student will be subject to further scrutiny to establish his/her understanding of their work.

Put simply, you should do this work on your own. By all means, discuss the generalities of coding with your friends but the coding should be all your own. The understanding you acquire through doing these assessments lays the foundation for the next CA and subsequent modules. It would be foolish to deny yourself the opportunity to learn this material since the next CA will presume (and typically need) this knowledge.

Thankfully, plagiarism is rare, likely due to the seriousness with which a finding of plagiarism is treated. If you are in any doubt about these regulations, then you should consult with your class lecturer **before** handing in your CA.

<script src="http://form.jotformpro.com/jsform/20676655777974" type="text/javascript"></script>