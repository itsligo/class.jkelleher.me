Title: Ajax & EF
----
Description: Building out ASP.NET MVC using EF

----
Date: 2014-1-26

----
Tags: MVC,ASP.NET

----
Text: 

####Recap on ASP.NET MVC Resources
ASP.NET MVC is an alternative to Microsoft's [ASP.NET](http://www.asp.net/) Web Forms server-side processing model. It lends itself better to larger applications where the use of the MVC (Model-View-Controller) pattern helps to better differentiate roles within an application. You'll find more resources in [RAD301](/rad301).

####Taking Stock

RAD302 follows the vector set by [RAD301](/rad301) by filling in gaps in what is necessary for best practice at enterprise-level computing. First, though some reflection on where we've come from and some further commentary on the significance of the move.

[Nick Polyak](http://awebpros.com/#Home.) provides an excellent pair ofÂ [posts](http://www.codeproject.com/Articles/456638/HTML5-JavaScript-Knockout-JQuery-Guide-for-Recover) detailing his move from WPF/Silverlight/XAML to the more web-centric stack of HTML/JavaScript/JQuery/KnockoutJS. His is a journey currently not uncommon as Microsoft re-orientate themselves as a serious web development tools company and in the process dis-possess themselves of previous leanings, notably WPF &amp; Silverlight.

Though the move to these alternative technologies is difficult there is much that was good in the design of WPF/Silverlight and Nick salvages that which is good and seeks to employ those tactics in the web stack - e.g. KnockoutJS to replicate data binding from XAML.

The [first post](http://www.codeproject.com/Articles/456638/HTML5-JavaScript-Knockout-JQuery-Guide-for-Recover) brings you up to speed on the role/syntax of JavaScript, how to work with JS in VS20XX and comes complete with source code.

The [second post](http://www.codeproject.com/Articles/464853/HTML5-JavaScript-Knockout-JQuery-Guide-for-Recover) will make more sense to those quite familiar with Silverlight but there's still a lot of use here. Those who remember Bea Stollnitz's (Costa) excellent blog post on rendering a graphical solar system from templates and styling will appreciate Nick's version, now employing KnockoutJS.

#### Pagination, Ajax and JS
This video traces the behind-the-scenes work to provide ajax access to a database-first proxied database. I look at JS ajax calls and local client-side manipulation of the data.
<iframe src="https://media.heanet.ie/player/caa53f729173b5dbc215e3408eddd469" name="caa53f729173b5dbc215e3408eddd469" width="560" height="360" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" webkitAllowFullScreen allowFullScreen></iframe>
<a href="https://www.youtube.com/watch?v=wpg0hYHPU6c">Youtube</a>

####Working with databases
We will use Entity Framework (EF) to help with accessing and manipulating databases. EF (like its competitor [nHibernate](http://nhforge.org/)) is an object-relational mapping tool. This means it helps your app to liaise more easily with a database. There are two (popular) ways by which EF will do this:

* Code First (new database) - building a **new** database from class definitions ([video](http://msdn.microsoft.com/en-us/data/jj193542))
* Database First (existing database) - taking an **existing** database and having EF create a bunch of proxy classes to assist in interacting with that database ([video](http://msdn.microsoft.com/en-us/data/jj200620))

Julie Lerman (a guru in this area) has an excellent, short [article](http://msdn.microsoft.com/en-us/magazine/hh148150.aspx) explaining these approaches. For any information on EF, your best starting point is MS's EF [Page](http://msdn.microsoft.com/en-us/data/ee712907).

In Code First approach, you avoid working with visual model designer (EDMX) completely. You write your POCO classes first and then create database from these POCO classes. Developers who follow the path of Domain-Driven Design (DDD) principles prefer to begin by coding their classes first and then generating the database required to persist their data.

Entity Framework (EF) enables developers to create data access applications by programming against a conceptual application model instead of programming directly against a relational storage schema. The goal is to decrease the amount of code and maintenance required for data-oriented applications. The general ambition of EF is to lower the impedance mismatch between how we manage data in database and how we seek to manipulate it in code.

####Flavours of EF support
As Rowan Miller shows in this [video](http://channel9.msdn.com/Shows/Web+Camps+TV/Rowan-Miller-Demonstrates-Entity-Framework-5-Using-ASPNET-MVC-4), EF can be employed in various ways, depending on whether your database already exists or is being created fresh. Similarly, you may prefer to work with a schema designer or have your database created through POCOs.

####Database Migrations
In earlier versions of EF, the solution was to 'drop' (delete) the database and re-script it. This meant that any extant data was lost. The work-around was to provide a 'Seed' method inside which code was used to created objects which then became entities in the database. While this wasn't arduous there needed to be a more 'gentle' way to update the database model.

Later versions of EF provide for database migration. This is a more intelligent way to update the model. It works by taking the changes you propose for the classes and creates scripts which make the corresponding modifications to the database structure. An additional bonus is that these changes can be rolled back should you change your mind. Seeding the database as before is also supported albeit in a slightly different way.
With code-first, the inevitability is that you will want to make changes to the model you created on foot of classes defined. This can have a significant effect on the resulting database and in the past necessitated the tear-down of the database and recreation. [Data migrations](http://msdn.microsoft.com/en-us/data/jj591621.aspx) aids in the updating of the schema to avoid the need to **drop** the database.

Method:
```
Install-Package EntityFramework
Enable-Migrations
Add-Migration NewFieldForLocation
Update-Database
```
In lab, we found that some needed to add the **-IncludePreRelease** switch to the Install-Package command (first command). This is likely to do with some conflict with EF and data migrations, one I haven't seen outside of labs.

The first command above ensures that EF is installed. The second fires up Data Migrations - a one time deal. The third command you may call a number of times - whenever you make a change to the class that back the data model. Each time you will then call update-database to push your local changes to the database.

####Issues with Data Migration
Sometimes data migration can throw problems, reporting that Add-Migration must be run but this doesn't resolve the problem. This may be a common problem for those using EF6 as changes were made that prompt this error. If you are having such (or similar) issues, work through the solution here.

1. Focus on the **Configuration** class that Data Migrations created for you. Ensure the following lines are in the ctor:
~~~~
    AutomaticMigrationsEnabled = true;
    AutomaticMigrationDataLossAllowed = true;
~~~~
   These lines ensure that data migrations are automatically made (first line) and that if that migration leads to data loss (or change), then you accept that is okay (generally the case with seed data)
2. Do your seeding of the database in the over-ridden Seed() method of **Configuration** class rather than a class derived from either **DropCreateDatabaseAlways<>** or **DropCreateDatabaseIfModelChanges<>**
3. In the DbContext class, add the following line to the ctor:
~~~~
Database.SetInitializer(new MigrateDatabaseToLatestVersion<TourContext, Configuration>());
~~~~
4. You may have to update your EF version to >6 to ensure this works. You may wish to use NuGet package manager to remove the existing EF install to make sure that the latest version is installed.
5. Remember to fully examine any exceptions that you get and remember to drill down into the last inner-exception to get the true cause of the problem.
----
practices:
####[Northwind](https://github.com/itsligo/northwind)
<small>Using EF Database First variant, Ajax querying, Bootstrap styling, MailService to handle contact form, Dependency Injection with Repository pattern</small>
####[EFBlogCon](https://github.com/itsligo/ef_cf_con)
<small>Console app showing basic EF Code First setup. Extend using data migrations</small>
####[PractEFBlogCon](https://github.com/itsligo/practEFBlogCon)
<small>In-class build up to EFBlogCon. uses data migration, lazy loading, seeding database</small>
####[College](https://github.com/itsligo/college)
<small>asp.NET follow-on from EFBlogCon. DI branch uses Repository pattern with Dependency Injection from Ninject.</small>
####[College2](https://github.com/itsligo/college2)
<small>Same as above but for older VS2012 installs with lower versions of MVC etc.</small>