Title: CA1

----

Description: Comprehensive CA

----
Session: Semester 6
----

Text:
<!--<div class='alert alert-info'>Competition</div>
(image: logo.png class: bg-success)
> In recognition of the work involved in this CA, I thought it might be worth securing a small prize.  Happily [O'Reilly](http://shop.oreilly.com/category/ebooks.do) have offered two â‚¬50 eBook vouchers for their [store](http://shop.oreilly.com/category/ebooks.do).
The best overall result for this CA will get one voucher and the most improved result (over the RAD301 result) will get another. Good luck.-->
<!-- <div class="alert alert-warning"><strong>Provisional</strong>
This CA description is not yet complete and will be subject to some minor changes. I'm making it available to give you some time to consider how you might approach the problem. When this message is removed, you can regard it as 'live'.   
</div> -->
This CA is to be completed out of class and submitted by the due date as per the class calendar. It examines the following concepts/topics:

*   Entity framework
*   Code First ORM creation
*   Working with DbContext & Entity Framework
*   Building LINQ-to-Entity queries
*   Employing WebAPI & Ajax calls
*   Employing useful jQuery (and other) libraries (particularly JS)

This assignment is quite open in terms of the deliverables. Broad parameters are provided to underwrite the learning outcomes. The purpose, feature set, and user-base of the application is for you to decide. The particular technical requirements are:

1. Use of public Web APIs (simple [guide](http://schoolofdata.org/2013/11/18/web-apis-for-non-programmers/))
2. Use and consumption of **own** web API
2. Use jQuery & Ajax calls to speed up apparent execution and interface with the RESTful apis.
3. Use of 3rd party JS libraries to enhance the user experience
4. Use of Git for source version control
5. Use of CSS framework extensively to enhance the user interface
6. Attention to mobile usage and provision of responsive design
7. Use of partial views to avoid un-necessary full-page refreshes
7. Use of back-end database supported by Entity Framework
8. Your app **must** work - ensure your **master** branch of your repo runs successfully. Code that does not compile (under VS2012/3) will be marked out of **70%**.

####Web APIs
Some sources of public web RESTful apis:

* [mashape](https://www.mashape.com/explore)
* [ProgrammableWeb](http://www.programmableweb.com/apis/directory)
* [WebResourcesDepot](http://www.webresourcesdepot.com/15-free-apis-you-didnt-hear-about-but-will-make-use-of/)

####Some examples of using web apis
Most of these apis are free though many will require you to signup so as to ensure the service isn't abused through overuse. It is your responsiblity to ensure that I am able to run your program to assess it later. Also, some apis will require a human response to sign you up so allow some time for this to occur.

* Google Static [map](https://developers.google.com/maps/documentation/staticmaps/?csw=1#quick_example)
* GeekSeat [ticket](https://www.mashape.com/seatgeek/seatgeek) engine
* Speak like [Yoda](https://www.mashape.com/ismaelc/yoda-speak)
* Flickr [api](https://developer.yahoo.com/flickr/)
* Big players public [apis](http://www.webdam.com/blog/top-10-web-apis_bridging-todays-technology/)

####Examples of possible solutions
* A **conference** app to manage the list of speakers attending. You could use the [Twitter](https://dev.twitter.com/rest/reference/get/users/search) api to retrieve names for your speakers. Persist this data to a database so that the user can query it in a number of ways. For example, your app could display a Google [Map](https://developers.google.com/chart/interactive/docs/gallery/geochart) showing the countries ([api](http://restcountries.eu)) from which the speakers come. Or you could depict the times that the speakers are presenting as a [timeline](https://google-developers.appspot.com/chart/interactive/docs/gallery/timeline) - first you would associate the speakers to specific slots. Remember that a portion of your data would originate from a web api but would then be stored locally to offer querying of that data.
* A **travel** app - create a test user on [TripIt](http://www.tripit.com) and add some upcoming trips to the account. Choose to display these trips in various ways in your app and persist the data through to your own database. Then add some value to this data by (say) calculating the distance (using Google Maps api) travelled in these trips either individually or in agregate. Futher, use a carbon footprint [calculator api](https://developer.berkeley.edu/apidocs/coolclimate) to estimate the carbon emitted from the trip(s). Then consider how you might depict this graphically (e.g. [chartjs.org](http://www.chartjs.org))

#### Notes/Hints

* If in doubt about the objectives, send me some detail of your plans and I'll confirm whether it's likely to meet the goals set out
* There are 1000s of web apis freely available and the range of possible applications you can invent to develop are equally vast. Given this, I would expect no two projects to be alike. However, to avoid conflict you are recommended to fill in the 'Handup' form below with the necessary details, part of which asks to specify a brief descripion of your app and what it will deliver.
*   Avoid using a connection string unless one is not generated automatically - this facilitates easier checking of your work during correction. If using a connection string, don't reference your dev machine directly - use the ".\(localdb)\v11.0" prefix. If necessary, you can use ".\SQLExpress" but use (localdb) in preference.
*   The award of a mark for this CA is not final unless an in-class selective assessment confirms your understanding. Penalties will apply for poor performance in-class in the answering of a question which is correctly answered in the assignment. You can mitigate against 
*   You may use VS2012 or VS2013.
*   There are marks for presentation of your data and for building robust code. Use jQuery/CSS or extensions/derivatives such as CSS Frameworks (e.g. Bootstrap) and jQuery plugins to ease development and improve your deliverables.

####Marking Scheme
* Inventiveness and originality of the proposed app **10 marks**
* Incorporation of RESTful web api calls and the sophistication of their usage **20 marks**
* Range and complexity of the business logic (e.g. range of app features, back-end processing, ) **20 marks**
* Richness and suitability of the user interface design and its implementation **20 marks**
* Employ and complexity of the back-end database, its querying, seeding and surfacing of the data **20 marks**
* Quality of coding effort (e.g. robust, commented, appropriateness of solutions) **10 marks**

<div class="alert alert-warning"><strong>Important</strong>
Note that this CA <strong>must</strong> be hosted on Github (or Bitbucket) and accessible to me (though not to public generally). I would expect to see regular pushed commits to this hosted repository over the course of the semester. Few pushes or large last minute pushes will prompt an interview to ensure that the work is original and own-generated.<br>
If an interview is called and you do not show, the work is not accepted and a score of 0% will be recorded.
</div>

<div class='alert alert-info'>
Enter details of your work <a href='https://docs.google.com/forms/d/10sm368ANGw8IbEdD9vzrfTzyZp5jK-q3CBDxu-BVKH8/viewform'>here.</a>
</div>